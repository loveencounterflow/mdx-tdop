// Generated by CoffeeScript 1.8.0

/*

  (c) 2006 Douglas Crockford

  Produce an array of simple token objects from a string.
  A simple token object contains these members:
       type: 'name', 'string', 'number', 'operator'
       value: string or number value of the token
       from: index of first character of the token
       to: index of the last character + 1

  Comments of the // type are ignored.

  Operators are by default single characters. Multicharacter
  operators can be made by supplying a string of prefix and
  suffix characters.
  characters. For example,

       '<>+-&', '=>&:'

  will match any of these:

       <=  >>  >>>  <>  >=  +: -: &: &&: &&
 */

(function() {
  String.prototype.tokens = function(prefix, suffix) {

    /* TAINT modifies `String.prototype` */
    var R, c, from, i, length, make, n, q, str;
    c = void 0;
    from = void 0;
    i = 0;
    length = this.length;
    n = void 0;
    q = void 0;
    str = void 0;
    R = [];
    make = function(type, value) {
      return {
        type: type,
        value: value,
        from: from,
        to: i
      };
    };
    if (!this) {
      return;
    }
    if (typeof prefix !== 'string') {
      prefix = '<>+-&';
    }
    if (typeof suffix !== 'string') {
      suffix = '=>&:';
    }
    c = this.charAt(i);
    while (c) {
      from = i;
      if (c <= ' ') {
        i += 1;
        c = this.charAt(i);
      } else if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {
        str = c;
        i += 1;
        while (true) {
          c = this.charAt(i);
          if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c === '_') {
            str += c;
            i += 1;
          } else {
            break;
          }
        }
        R.push(make('name', str));
      } else if (c >= '0' && c <= '9') {
        str = c;
        i += 1;
        while (true) {
          c = this.charAt(i);
          if (c < '0' || c > '9') {
            break;
          }
          i += 1;
          str += c;
        }
        if (c === '.') {
          i += 1;
          str += c;
          while (true) {
            c = this.charAt(i);
            if (c < '0' || c > '9') {
              break;
            }
            i += 1;
            str += c;
          }
        }
        if (c === 'e' || c === 'E') {
          i += 1;
          str += c;
          c = this.charAt(i);
          if (c === '-' || c === '+') {
            i += 1;
            str += c;
            c = this.charAt(i);
          }
          if (c < '0' || c > '9') {
            make('number', str).error('Bad exponent');
          }
          while (true) {
            i += 1;
            str += c;
            c = this.charAt(i);
            if (!(c >= '0' && c <= '9')) {
              break;
            }
          }
        }
        if (c >= 'a' && c <= 'z') {
          str += c;
          i += 1;
          make('number', str).error('Bad number');
        }
        n = +str;
        if (isFinite(n)) {
          R.push(make('number', n));
        } else {
          make('number', str).error('Bad number');
        }
      } else if (c === '\'' || c === '"') {
        str = '';
        q = c;
        i += 1;
        while (true) {
          c = this.charAt(i);
          if (c < ' ') {
            make('string', str).error((c === '\n' || c === '\r' || c === '' ? 'Unterminated string.' : 'Control character in string.'), make('', str));
          }
          if (c === q) {
            break;
          }
          if (c === '\\') {
            i += 1;
            if (i >= length) {
              make('string', str).error('Unterminated string');
            }
            c = this.charAt(i);
            switch (c) {
              case 'b':
                c = '\b';
                break;
              case 'f':
                c = '\f';
                break;
              case 'n':
                c = '\n';
                break;
              case 'r':
                c = '\r';
                break;
              case 't':
                c = '\t';
                break;
              case 'u':
                if (i >= length) {
                  make('string', str).error('Unterminated string');
                }
                c = parseInt(this.substr(i + 1, 4), 16);
                if (!isFinite(c) || c < 0) {
                  make('string', str).error('Unterminated string');
                }
                c = String.fromCharCode(c);
                i += 4;
            }
          }
          str += c;
          i += 1;
        }
        i += 1;
        R.push(make('string', str));
        c = this.charAt(i);
      } else if (c === '/' && this.charAt(i + 1) === '/') {
        i += 1;
        while (true) {
          c = this.charAt(i);
          if (c === '\n' || c === '\r' || c === '') {
            break;
          }
          i += 1;
        }
      } else if (prefix.indexOf(c) >= 0) {
        str = c;
        i += 1;
        while (true) {
          c = this.charAt(i);
          if (i >= length || suffix.indexOf(c) < 0) {
            break;
          }
          str += c;
          i += 1;
        }
        R.push(make('operator', str));
      } else {
        i += 1;
        R.push(make('operator', c));
        c = this.charAt(i);
      }
    }
    return R;
  };

}).call(this);
